---
reuse-blerbs:
  - &python_prereqs
    run:
      name: Install testing pre-reqs
      command: |
        # Set python to 3.9.1
        pyenv versions
        pyenv global 3.9.1
        pip install -U pip
        pip install pipenv
        pipenv install

version: 2.1
commands:
  check-changed-files-or-halt:
    parameters:
      pattern:
        type: string
    steps:
      - run: git diff --name-only develop...HEAD|grep -q '<< parameters.pattern >>' || circleci step halt

jobs:
  safety_check:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/securethenews
    steps:
      - checkout

      - *python_prereqs

      - run:
          name: Check Python dependencies for CVEs
          command: |
            pipenv install --selective-upgrade safety
            pipenv run make safety

      - run:
          name: linters on the source
          command: |
            pipenv run make lint

      - run:
          name: Static code analysis for vulnerabilities
          command: |
            pipenv install --selective-upgrade bandit
            pipenv run make bandit

  npm_audit:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/freedom.press
    steps:
      - checkout
      - check-changed-files-or-halt:
          pattern: ^package-lock.json$

      - *python_prereqs

      - run:
          name: Check node dependencies for vulnerabilities
          command: |
            pipenv run make dev-init
            pipenv run make ci-npm-audit

      - store_test_results:
          path: ~/freedom.press/test-results/

  run_prod:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/securethenews
    steps:
      - checkout

      - *python_prereqs

      - run:
          name: Ensure we can run prod env
          command: |
            pipenv run docker-compose -f prod-docker-compose.yaml up -d
            while ! curl --output /dev/null --silent --head --fail http://localhost:8000; do sleep 1; done;
          no_output_timeout: 5m

      - run:
          name: Check for missing migrations
          command: |
            pipenv run docker-compose -f prod-docker-compose.yaml exec django /bin/bash -c "./manage.py makemigrations --dry-run --check"

      - run:
          name: Run app tests against prod containers
          command: |
            pipenv run docker-compose -f prod-docker-compose.yaml exec django /bin/bash -c "./manage.py test --noinput -k"

      # Setting `|| true` because we expect this step to fail, due to a broken pathlib import.
      # See upstream issue: https://github.com/pytest-dev/pytest/issues/5017 Once that issue
      # is resolved, we can work on unbreaking the tests.
      - run:
          name: Run infra tests against prod containers
          command: |
            pipenv run pytest --junit-xml test-results/ops-tests.xml infratests || true

      - run:
          name: Yank docker logs
          command: |
            mkdir -p ~/dockercomposelogs || true
            pipenv run docker-compose -f prod-docker-compose.yaml logs > ~/dockercomposelogs/prod.log
          when: always

      - store_artifacts:
          path: ~/dockercomposelogs

      - store_test_results:
          path: ~/securethenews/test-results

  run_dev:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/securethenews
    steps:
      - checkout

      - *python_prereqs

      - run:
          name: Ensure we can build and run dev env
          command: |
            pipenv run make dev-init
            pipenv run docker-compose up -d
            echo "Wait for environment to come up completely"
            while ! curl --output /dev/null --silent --head --fail http://localhost:8000; do sleep 1; done;
            pipenv run make check-migrations
            pipenv run make app-tests-dev
          no_output_timeout: 5m

      - store_artifacts:
          path: htmlcov

      - run:
          name: Yank docker logs
          command: |
            mkdir -p ~/dockercomposelogs || true
            pipenv run docker-compose logs > ~/dockercomposelogs/dev.log
          when: always

      - store_artifacts:
          path: ~/dockercomposelogs

      - store_test_results:
          path: ~/securethenews/test-results

workflows:
  version: 2
  securethenews_ci:
    jobs:
      - safety_check
      - npm_audit
      - run_prod
      - run_dev
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - develop
    jobs:
      - safety_check
